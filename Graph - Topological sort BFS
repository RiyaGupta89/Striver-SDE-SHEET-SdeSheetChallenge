
class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int[] answer=new int[V];
        int k=0;
        int[] indegree = new int[V];
        boolean[] visited=new boolean[V];
        for(int i=0;i<V;i++){
            indegree[i]=0;
        }
        
        for(int i=0;i<V;i++){
            for(int neighbour:adj.get(i)){
                indegree[neighbour]++;
            }
        }
        
        Queue<Integer> q=new LinkedList<>();
        
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        
        while(!q.isEmpty()){
            int currentVertex = q.remove();
            answer[k]=currentVertex;
            k++;
            if(visited[currentVertex]==true){
                continue;
            }
            visited[currentVertex]=true;
            for(int neighbour: adj.get(currentVertex)){
                indegree[neighbour]-=1;
                if(indegree[neighbour]==0){
                    q.add(neighbour);
                }
            }
            
        }
        
        return answer;
        
        
        
    }
}
