class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        
        boolean[] visited=new boolean[V];
        for(int i=0;i<V;i++){
            visited[i]=false;
        }
        
        for(int i=0;i<V;i++){
            if(visited[i]==false){
                if(bfs(i,V,adj,visited,-1)){
                    return true;
                }
            }
        }
        
        return false;
    }
       private boolean bfs(int currentVertex,int V,ArrayList<ArrayList<Integer>> adj,boolean[] visited,int currentParent){
        Queue<Integer> q=new LinkedList<>();
        q.add(currentVertex);
        while(!q.isEmpty()){
            int vertex = q.remove();
            visited[vertex]=true;
             for(int neighbour: adj.get(vertex)){
                if(visited[neighbour]==true){
                     if(neighbour!=currentParent){
                    return true;
                    }
                } else {
                    q.add(neighbour);
                }
        }
    }
    return false;
}
}  
