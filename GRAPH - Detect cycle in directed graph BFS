class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean[] visited = new boolean[V];
        int visitedVertices=0;
        for(int i=0;i<V;i++){
            visited[i]=false;
        }
        int[] indegree = new int[V];
        for(int i=0;i<V;i++){
            indegree[i]=0;
        }
        for(int i=0;i<adj.size();i++){
            for(int neighbour:adj.get(i)){
                indegree[neighbour]++;   
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        
        while(!q.isEmpty()){
            int currentVertex = q.remove();
            
            if(visited[currentVertex]==true)
                continue;
            
            visited[currentVertex]=true;
            visitedVertices+=1;
            for(int neighbour:adj.get(currentVertex)){
                 indegree[neighbour]-=1;
                if(indegree[neighbour]==0){
                    q.add(neighbour);
                }     
            }
           
        }
        
        
        return !(visitedVertices==V);
    }
}
