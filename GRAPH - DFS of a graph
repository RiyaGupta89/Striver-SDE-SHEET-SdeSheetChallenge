class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> answer = new ArrayList<>();
        Boolean[] visited = new Boolean[V];
        for(int i=0;i<V;i++){
            visited[i]=false;
        }
        dfs(0,V, adj, answer, visited);
        return answer;
        
    }
    
    private void dfs(int ci, int V, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> answer, Boolean[] visited) {
        if(visited[ci]==false){
            visited[ci]=true;
            answer.add(ci);
            for(int i=0;i<adj.get(ci).size();i++){
                dfs(adj.get(ci).get(i),V,adj,answer,visited);
            }
        }
    return;
        
    }
    
}
